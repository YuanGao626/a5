# Assignment 5 reflection

## Submitter metadata

Partner 1: Firstname Lastname (NetID)  - Ivan Zheng iz56
Partner 2: Firstname Lastname (NetID)  - Yuan Gao yg626

Hours spent working on this assignment: 11.0

## Verification questions

In the "menus" folder of your project, you'll find dinner menus from seven of Cornell's dining
halls on Wednesday, March 26 (information from https://now.dining.cornell.edu/eateries). Use your
IndexerApp to answer the following questions about these menus.

1. Which dining halls were serving quinoa that night?

   Answer: 104west, morrison, and okenshields

2. On how many lines of North Star's menu does "chicken" appear?

   Answer: 3 lines (7, 19, 23)

3. Only one dining hall was serving a sausage pizza. Which one?

   Answer: northstar

## Reflection questions

1. For a single source with N words of a fixed length, what is the expected asymptotic complexity of
   your `CollectionsIterator` solution in terms of N? (you will need to read the JavaDoc pages for
   the collections and methods you used in order to know their complexity claims)  Explain your
   reasoning.

        The expected complexity of my CollectionsIterator would be O(NlogN). The initial putting words
        into the hashmap and set takes O(N) time due to a for loop through words. But the part of the code
        where we actually output we needed to use the .sort method which has a average and worst time complexity
        of O(NlogN) which becomes our bottleneck and therefore making the entire methods time complexity O(NlogN).

2. What is the **worst-case** time complexity of TwoPassIndexer in terms of N, the total number of
   words across all files?  What algorithmic substitution would improve this worst-case complexity,
   and what would the new complexity be?

        The worst case time complexity of the TwoPassIndexer method is algo O(NlogN), this is because it goes
        through a binary search which becomes the becomes the bottle neck at that time. This could be reduced
        by replacing the binary search and sorted list with a hashtable instead, with would decrease it to just
        O(N) which was the time complexity of adding all words into the dynamic array.

